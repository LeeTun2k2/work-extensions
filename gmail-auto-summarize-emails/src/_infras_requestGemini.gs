/**
 * Sends a content generation request to the Google Gemini API and returns the AI's text response.
 * It retrieves the API key and model from script properties before constructing and sending the request.
 *
 * @param {string} prompt - The text prompt to send to the Gemini model.
 * @returns {string|null} The text content generated by the Gemini model, or null if an error occurs.
 */
const requestGemini = (prompt) => {
    try {
        // get gemini model configs
        const apiKey = getGeminiApiKey();
        const apiModel = getGeminiApiModel();

        // build gemini request
        const endpoint = `https://generativelanguage.googleapis.com/v1beta/models/${apiModel}:generateContent?key=${apiKey}`
        const payload = {
            contents: [
                {
                    parts: [
                        { text: prompt },
                    ],
                },
            ],
        };
        const options = {
            method: 'POST',
            contentType: 'application/json',
            payload: JSON.stringify(payload)
        };
        // send request to gemini
        const response = UrlFetchApp.fetch(endpoint, options);
        // parse data and return the text response.
        const data = JSON.parse(response);
        const content = data['candidates'][0]['content']['parts'][0]['text'];
        Logger.log(`[INFO] requestGemini: Request to Gemini Api has been successfully. Received: ${content.length} characters.`)
        return content;
    }
    catch (ex) {
        Logger.log(`[ERROR] requestGemini: ${ex}`)
    }
}